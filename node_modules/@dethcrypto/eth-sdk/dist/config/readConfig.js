"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = void 0;
const path_1 = require("path");
const makeError_1 = require("../utils/makeError");
const types_1 = require("./types");
async function readConfig(filePath, requireJs) {
    const extension = (0, path_1.extname)(filePath);
    try {
        let exported;
        if (['.json', '.js', '.cjs'].includes(extension)) {
            exported = requireJs(filePath);
        }
        else if (extension === '.ts') {
            if (!tsNodeIsRegistered(requireJs)) {
                await registerTsNode();
            }
            exported = requireJs(filePath);
        }
        else {
            throw new Error(`Unsupported config file extension: ${extension}`);
        }
        if (exported && typeof exported === 'object') {
            exported = exported.default || exported;
        }
        return (0, types_1.parseEthSdkConfig)(exported);
    }
    catch (err) {
        throw new Error(`Could not read config file: ${filePath}` + '\n' + (0, makeError_1.makeError)(err).message);
    }
}
exports.readConfig = readConfig;
async function registerTsNode() {
    try {
        const { register } = await Promise.resolve().then(() => __importStar(require('ts-node')));
        register({ compilerOptions: { module: 'CommonJS' } });
    }
    catch (error) {
        const err = (0, makeError_1.makeError)(error);
        if (err.code === 'MODULE_NOT_FOUND') {
            throw new Error(`You need ts-node to write eth-sdk config in TypeScript.`);
        }
        throw err;
    }
}
function tsNodeIsRegistered({ extensions }) {
    return extensions && '.ts' in extensions;
}
//# sourceMappingURL=readConfig.js.map