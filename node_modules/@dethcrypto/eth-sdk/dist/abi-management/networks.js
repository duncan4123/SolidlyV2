"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.symbolToNetworkId = exports.isUserProvidedNetwork = exports.UserProvidedNetworkSymbol = exports.networkIDtoSymbol = exports.NetworkID = void 0;
const lodash_1 = require("lodash");
// note: copied from https://github.com/nomiclabs/hardhat/blob/master/packages/hardhat-etherscan/src/network/prober.ts
var NetworkID;
(function (NetworkID) {
    NetworkID[NetworkID["MAINNET"] = 1] = "MAINNET";
    NetworkID[NetworkID["ROPSTEN"] = 3] = "ROPSTEN";
    NetworkID[NetworkID["RINKEBY"] = 4] = "RINKEBY";
    NetworkID[NetworkID["GOERLI"] = 5] = "GOERLI";
    NetworkID[NetworkID["KOVAN"] = 42] = "KOVAN";
    // Binance Smart Chain
    NetworkID[NetworkID["BSC"] = 56] = "BSC";
    NetworkID[NetworkID["BSC_TESTNET"] = 97] = "BSC_TESTNET";
    // Huobi ECO Chain
    NetworkID[NetworkID["HECO"] = 128] = "HECO";
    NetworkID[NetworkID["HECO_TESTNET"] = 256] = "HECO_TESTNET";
    // Fantom mainnet
    NetworkID[NetworkID["OPERA"] = 250] = "OPERA";
    NetworkID[NetworkID["FTM_TESTNET"] = 4002] = "FTM_TESTNET";
    // Optimism
    NetworkID[NetworkID["OPTIMISTIC_ETHEREUM"] = 10] = "OPTIMISTIC_ETHEREUM";
    NetworkID[NetworkID["OPTIMISTIC_KOVAN"] = 69] = "OPTIMISTIC_KOVAN";
    // Polygon
    NetworkID[NetworkID["POLYGON"] = 137] = "POLYGON";
    NetworkID[NetworkID["POLYGON_MUMBAI"] = 80001] = "POLYGON_MUMBAI";
    // Arbitrum
    NetworkID[NetworkID["ARBITRUM_ONE"] = 42161] = "ARBITRUM_ONE";
    NetworkID[NetworkID["ARBITRUM_TESTNET"] = 421611] = "ARBITRUM_TESTNET";
    // Avalanche
    NetworkID[NetworkID["AVALANCHE"] = 43114] = "AVALANCHE";
    NetworkID[NetworkID["AVALANCHE_FUJI_TESTNET"] = 43113] = "AVALANCHE_FUJI_TESTNET";
})(NetworkID = exports.NetworkID || (exports.NetworkID = {}));
exports.networkIDtoSymbol = {
    [NetworkID.MAINNET]: 'mainnet',
    [NetworkID.ROPSTEN]: 'ropsten',
    [NetworkID.RINKEBY]: 'rinkeby',
    [NetworkID.GOERLI]: 'goerli',
    [NetworkID.KOVAN]: 'kovan',
    [NetworkID.BSC]: 'bsc',
    [NetworkID.BSC_TESTNET]: 'bscTestnet',
    [NetworkID.HECO]: 'heco',
    [NetworkID.HECO_TESTNET]: 'hecoTestnet',
    [NetworkID.OPERA]: 'opera',
    [NetworkID.FTM_TESTNET]: 'ftmTestnet',
    [NetworkID.OPTIMISTIC_ETHEREUM]: 'optimism',
    [NetworkID.OPTIMISTIC_KOVAN]: 'optimismKovan',
    [NetworkID.POLYGON]: 'polygon',
    [NetworkID.POLYGON_MUMBAI]: 'polygonMumbai',
    [NetworkID.ARBITRUM_ONE]: 'arbitrumOne',
    [NetworkID.ARBITRUM_TESTNET]: 'arbitrumTestnet',
    [NetworkID.AVALANCHE]: 'avalanche',
    [NetworkID.AVALANCHE_FUJI_TESTNET]: 'fuji',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
const UserProvidedNetworkSymbol = (s) => s;
exports.UserProvidedNetworkSymbol = UserProvidedNetworkSymbol;
function isUserProvidedNetwork(symbol, userNetworks) {
    return !!(symbol in userNetworks && userNetworks[symbol]);
}
exports.isUserProvidedNetwork = isUserProvidedNetwork;
exports.symbolToNetworkId = (0, lodash_1.invert)(exports.networkIDtoSymbol);
//# sourceMappingURL=networks.js.map